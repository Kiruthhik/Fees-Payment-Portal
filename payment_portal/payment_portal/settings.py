"""
Django settings for payment_portal project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

CSRF_TRUSTED_ORIGINS = [
    'https://f21ebfc5ea03.ngrok-free.app',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_auth_adfs',
    'portal', 
    'sslserver',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_auth_adfs.middleware.LoginRequiredMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'payment_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'payment_portal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import os

DATABASES = {
  'default': {
    'ENGINE': 'mssql',  # provided by mssql-django
    'NAME': os.environ.get('DB_NAME'),
    'USER': os.environ.get('DB_USER'),    # or 'adminuser@servername' if server-admin
    'PASSWORD': os.environ.get('DB_PASSWORD'),
    'HOST': os.environ.get('DB_HOST'),
    'PORT': '1433',
    'OPTIONS': {
        'driver': 'ODBC Driver 18 for SQL Server',
        # optional extra params; Azure requires encryption:
        'extra_params': 'Encrypt=yes;TrustServerCertificate=no;'
    },
  }
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Client secret is not public information. Should store it as an environment variable.

# AUTH_ADFS = {
#     'AUDIENCE': os.getenv('client_id'),
#     'CLIENT_ID': os.getenv('client_id'),
#     'CLIENT_SECRET': os.getenv('client_secret'),
#     'CLAIM_MAPPING': {'first_name': 'given_name',
#                       'last_name': 'family_name',
#                       'email': 'upn'},
#     'GROUPS_CLAIM': 'roles',
#     'MIRROR_GROUPS': True,
#     'USERNAME_CLAIM': 'upn',
#     'TENANT_ID': os.getenv('tenant_id'),
#     'RELYING_PARTY_ID': os.getenv('client_id'),
#     #"LOGIN_EXEMPT_URLS": ["api/", "public/"],
#     "LOGIN_EXEMPT_URLS": ["^$", "api/", "public/"],

# }
AUTH_ADFS = {
    'AUDIENCE': os.getenv('client_id'),
    'CLIENT_ID': os.getenv('client_id'),
    'CLIENT_SECRET': os.getenv('client_secret'),

    'CLAIM_MAPPING': {
        'first_name': 'given_name',
        'last_name': 'family_name',
        'email': 'upn',   # <– use UPN as the email fallback
    },

    'USERNAME_CLAIM': 'upn',   # <– must match token’s available claim

    'GROUPS_CLAIM': 'roles',
    'MIRROR_GROUPS': True,

    'TENANT_ID': os.getenv('tenant_id'),
    'RELYING_PARTY_ID': os.getenv('client_id'),

    'LOGIN_EXEMPT_URLS': ["^$", "api/", "public/"],
}






AUTHENTICATION_BACKENDS = [
    'django_auth_adfs.backend.AdfsAccessTokenBackend',
    "django_auth_adfs.backend.AdfsAuthCodeBackend",
]
#from portal import urls
LOGIN_URL = "/"
LOGIN_REDIRECT_URL = '/home/'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Make Django treat ngrok connections as HTTPS
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Optional: Force HTTPS cookies (good practice for OAuth)
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
